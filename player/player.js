(function () {
    if (!window.stratum) {
        alert("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ stratum –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!");
        return;
    }
    stratum.options.iconsLocation = "./data/icons";

    // –ü–æ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã bmp –∏ vdr.
    const preloadDynamicResources = (fs) => Promise.all([[...fs.search(/.+\.(bmp)|(vdr)$/i)].map((f) => f.makeSync())]);

    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É.
    let stdlib;
    fetch("./data/library.zip")
        .then((r) => r.blob())
        .then((b) => stratum.unzip(b, { directory: "L:" }))
        .then((fs) => preloadDynamicResources((stdlib = fs)))
        .catch(() => console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É"));

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ–∫–Ω–æ.
    window.addEventListener("load", () => {
        const dropzoneContainerElem = document.getElementById("dropzone_container");
        const dropzoneStatusElem = document.getElementById("dropzone_status");
        const dropzoneStatusOrigText = dropzoneStatusElem.innerHTML;
        const optionsNolib = document.getElementById("options_nolib");
        const optionsNoResize = document.getElementById("options_noresize");
        const mainWindowContainerElem = document.getElementById("main_window_container");

        let projectLoaded = false;
        const loadProject = async (files) => {
            if (projectLoaded || !files || files.length === 0) return;
            projectLoaded = true;

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç.
            let project;
            try {
                dropzoneStatusElem.innerHTML = `–û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤${files.length > 1 ? "—ã" : ""} ...`;
                // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∏–Ω—É—Ç—ã–µ –∞—Ä—Ö–∏–≤—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ –Ω–∏—Ö –æ–¥–Ω–æ —Ü–µ–ª–æ–µ.
                const fs = (await Promise.all(Array.from(files).map(stratum.unzip))).reduce((a, b) => a.merge(b));

                let tailPath;
                {
                    const projectFiles = [...fs.search(/.+\.(prj)|(spj)$/i)];
                    if (projectFiles.length !== 1) {
                        if (projectFiles.length > 0) {
                            const matches = projectFiles.map((f) => f.pathDos).join("\n");
                            const msg = `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n${matches}\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å/—á–∞—Å—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–µ–∫—Ç–∞:`;
                            tailPath = prompt(msg, projectFiles[0].pathDos);
                        } else {
                            tailPath = prompt("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å/—á–∞—Å—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–µ–∫—Ç–∞:");
                        }
                        dropzoneStatusElem.innerHTML = `–ò—â–µ–º —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ ${tailPath} ...`;
                    } else {
                        tailPath = projectFiles[0].pathDos;
                        dropzoneStatusElem.innerHTML = `–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç ${tailPath} ...`;
                    }
                }
                if (!tailPath) {
                    dropzoneStatusElem.innerHTML = dropzoneStatusOrigText;
                    projectLoaded = false;
                    return;
                }

                // –ü–æ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º bmp –∏ vdr
                await preloadDynamicResources(fs);

                // –ü—Ä–∏–¥–µ–ª—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É.
                if (stdlib && !optionsNolib.checked) fs.merge(stdlib);
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                project = await fs.project({ additionalClassPaths: ["L:"], tailPath });
                // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å.
                // –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞ —Å—Ç–∞—Ä—Ç–µ.
                project.play({
                    mainWindowContainer: mainWindowContainerElem,
                    disableWindowResize: optionsNoResize.checked,
                });
            } catch (e) {
                projectLoaded = false;
                alert(`–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n${e.message}`);
                dropzoneStatusElem.innerHTML = "–ù–µ—É–¥–∞—á–∞ üòø... –ü–æ–ø—Ä–æ–±—É–µ–º <a href='javascript:selectFile()'>—á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ</a>?";
                return;
            }
            // –£–±–∏—Ä–∞–µ–º –¥—Ä–æ–ø–∑–æ–Ω—É, —Ç.–∫. –º–Ω–µ –ø–æ–∫–∞ –ª–µ–Ω—å –¥–µ–ª–∞—Ç—å —Ä–µ–ª–æ–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏
            // –Ω–∞–∫–∏–¥—ã–≤–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤.
            dropzoneContainerElem.remove();

            // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –∫–∞–ª–±–µ–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
            {
                const playerPlayElem = document.getElementById("player_play");
                const playerPauseElem = document.getElementById("player_pause");
                const playerStepElem = document.getElementById("player_step");

                const updateControls = () => {
                    playerPlayElem.value = project.state === "closed" ? "–ò–≥—Ä–∞—Ç—å" : "–°—Ç–æ–ø";
                    playerPauseElem.value = project.state === "paused" ? "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" : "–ü–∞—É–∑–∞";
                    playerPauseElem.disabled = project.state === "closed";
                };

                const handleClick = ({ target }) => {
                    switch (target) {
                        case playerPlayElem:
                            project.state === "closed" ? project.play() : project.close();
                            break;
                        case playerPauseElem:
                            project.state === "paused" ? project.continue() : project.pause();
                            break;
                        case playerStepElem:
                            (project.state === "playing" ? project : project.play()).pause().step();
                            break;
                    }
                    updateControls();
                };
                playerPlayElem.addEventListener("click", handleClick);
                playerPauseElem.addEventListener("click", handleClick);
                playerStepElem.addEventListener("click", handleClick);

                project
                    .on("error", (err) => {
                        console.warn(err);
                        alert("–í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏, —Å–º. –≤ –∫–æ–Ω—Å–æ–ª–∏ (F12)");
                        updateControls();
                    })
                    .on("closed", () => {
                        alert("–ü—Ä–æ–µ–∫—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                        updateControls();
                    });

                updateControls();
                playerPlayElem.disabled = false;
                playerStepElem.disabled = false;
            }
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ–∫–Ω–æ.
        {
            const bodyElem = document.body;
            bodyElem.addEventListener("dragover", (evt) => evt.preventDefault());
            let fileAboveWindow = false;
            bodyElem.addEventListener("dragenter", ({ dataTransfer }) => {
                if (fileAboveWindow || dataTransfer.types.indexOf("Files") < 0) return;
                dropzoneStatusElem.innerHTML = "–û—Ç–ø—É—Å—Ç–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º—ã—à–∏, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç...";
                fileAboveWindow = true;
            });
            bodyElem.addEventListener("dragleave", ({ relatedTarget }) => {
                if (!fileAboveWindow || relatedTarget) return;
                dropzoneStatusElem.innerHTML = dropzoneStatusOrigText;
                fileAboveWindow = false;
            });
            bodyElem.addEventListener("drop", (evt) => {
                evt.preventDefault();
                dropzoneStatusElem.innerHTML = dropzoneStatusOrigText;
                fileAboveWindow = false;
                loadProject(evt.dataTransfer.files);
            });
        }
        document.getElementById("zipdrop").addEventListener("change", ({ target: { files } }) => loadProject(files));
    });
})();
const selectFile = () => document.getElementById("zipdrop").click();
